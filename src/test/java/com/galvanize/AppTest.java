package com.galvanize;
/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import com.galvanize.cart.Cart;
import com.galvanize.cart.Item;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;

import static org.junit.jupiter.api.Assertions.*;

public class AppTest {
    @Test
    public void testAppHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");

    }
    @Test
    public void testCartEmpty(){
        Cart cart = new Cart();
        ArrayList<Item> expected = new ArrayList<>();
        ArrayList<Item> actual = cart.getCartItems();

        assertArrayEquals(expected.toArray(), actual.toArray(), "cart should be empty");
    }

    @Test
    public void testAddOneToCart() {
        Cart cart = new Cart();

        Item item = new Item();
        int actual = cart.addItem(item);

        assertEquals(1, actual, "cart should have one item");
    }

    @Test
    public void testAddManyToCart() {
        Cart cart = new Cart();
        Item item1 = new Item();
        Item item2 = new Item();
        Item item3 = new Item();

        cart.addItem(item1);
        cart.addItem(item2);
        int actual = cart.addItem(item3);

        assertEquals(3, actual, "cart should have three items");
    }

//     @Test
//     public void addItem_typeIsItem() {
//         Cart cart = new Cart();
//         Object notItem = new Object();
//         int actual = cart.addItem(notItem);
//     }

    @Test
    public void getTotalPrice_getTotal() {
        Cart cart = new Cart();
        Item item1 = new Item(3.50);
        Item item2 = new Item(2.50);

        cart.addItem(item1);
        cart.addItem(item2);

        double actual = cart.getTotalPrice();

        double expected = 3.50 + 2.50;

        assertEquals(expected, actual, "Should return total price");
    }

    @Test
    public void setItemPrice_notNegative() {
        Cart cart = new Cart();
        Exception expected = assertThrows(IllegalArgumentException.class, () -> {
            new Item(-14.95);
        });
        assertTrue(expected.getMessage().contains("Invalid Price"));
    }

    @Test
    public void itemizedList_getItems() {
        Cart cart = new Cart();
        Item item1 = new Item("Item1", 1.00);
        Item item2 = new Item("Item2", 2.00);

        ArrayList<Item> items = new ArrayList<>();
        items.add(item1);
        items.add(item2);

        String receipt = "";
        for (Item item : items) {
            receipt += "item: " + item.getName() + " price: " + item.getPrice() +
            "\n";
        }

        cart.addItem(item1);
        cart.addItem(item2);
        String actual = cart.itemizedList();

        assertEquals(receipt, actual, "cart should contain added items");
    }

    @Test
    public void itemizedList_emptyList() {
        Cart cart = new Cart();
        String expected = "Cart is empty";

        assertEquals(expected, cart.itemizedList(),
            "empty card should return predefined text");
    }

    @Test
    public void getTotal_Price() {
        Cart cart = new Cart();
        Item item1 = new Item("item1", 2.33);

        cart.addItem(item1);
        cart.addItem(item1);
        assertEquals(4.66, cart.getTotalPrice(),
                "total price reflects both item price and qty");
    }

    @Test
    public void itemQuantities_getQuantities() {
         Cart cart = new Cart();
         Item item1 = new Item("item1", 2.33);

         cart.addItem(item1);
         cart.addItem(item1);
         String expected = "item: item1 qt: 2\n";

         String actual = cart.itemQuantities();

         assertEquals(expected, actual, "should return quantities list");

    }

    @Test
    public void itemQuantities_emptyCart() {
        Cart cart = new Cart();

        String expected = "No items";
        String actual = cart.itemQuantities();
        assertEquals(expected, actual, "should return empty quantities list");

    }

    @Test
    public void onSaleItems_includesItemsOnSale() {
        Cart cart = new Cart();
        Item item1 = new Item("Item1", 1.00, true);
        Item item2 = new Item("Item2", 2.00);
        Item item3 = new Item("Item3", 3.00, true);

        cart.addItem(item1);
        cart.addItem(item2);
        cart.addItem(item3);

        String expected = "Item1\nItem3\n";
        String actual = cart.onSaleItems();

        assertEquals(expected, actual, "should return on sale items list");
    }

    @Test
    public void onSaleItems_noItemsOnSale() {
        Cart cart = new Cart();
        Item item1 = new Item("Item1", 1.00);
        Item item2 = new Item("Item2", 2.00);

        cart.addItem(item1);
        cart.addItem(item2);

        String expected = "No Items on Sale";
        String actual = cart.onSaleItems();

        assertEquals(expected, actual, "should return on sale items list");
    }

    @Test
    public void onSaleItems_multipleOfSameItemOnSale() {
        Cart cart = new Cart();
        Item item1 = new Item("Item1", 1.00, true);

        cart.addItem(item1);
        cart.addItem(item1);

        String expected = "Item1\n";
        String actual = cart.onSaleItems();

        assertEquals(expected, actual,
            "multiple of the one on-sale item should return just the one item");
    }

}

//new ArrayList<Integer>(Arrays.asList(1,2,3,5,8,13,21));
//assertArrayEquals(list1.toArray(), list2.toArray());



//     @Test(expected = NullPointerException.class)
//     public void whenExceptionThrown_thenExpectationSatisfied() {
//         String test = null;
//         test.length();
//     }

//    @Test
//    void testExpectedException() {
//
//        //First argument - specifies the expected exception.
//        //Here it expects that code block will throw NumberFormatException
//        //Second argument - is used to pass an executable code block or lambda expression
//        Assertions.assertThrows(NumberFormatException.class, () -> {
//            Integer.parseInt("One");
//        });
//
//    }
// try
    // if double -> do somthing
// catch (IllegalArgumentException name)
    // throw new IllegalArgumentException("Wrong type")
    // optional ->  System.err.println("IndexOutOfBoundsException)

//     @Test
//     void test_exception_custom() {
//         Exception exception = assertThrows(
//                 NameNotFoundException.class,
//                 () -> findByName("mkyong"));
//
//         assertTrue(exception.getMessage().contains("not found"));
//     }
//
//     String findByName(String name) throws NameNotFoundException{
//         throw new NameNotFoundException( name + " not found!");
//     }
